<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gst" version="1.0"/>
  <package name="gstreamer-check-1.0"/>
  <c:include name="gst/check/check.h"/>
  <namespace name="GstCheck"
             version="1.0"
             shared-library="gstcheck-1.0-0.dll"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst">
    <function-macro name="CHECK_DEPRECATED_FOR"
                    c:identifier="GST_CHECK_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\check-prelude.h" line="37"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <record name="CheckABIStruct" c:type="GstCheckABIStruct">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="72"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.h"
             line="62">The name of the structure</doc>
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="size" writable="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.h"
             line="63">The current size of a structure</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="abi_size" writable="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.h"
             line="64">The reference size of the structure</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <record name="CheckLogFilter" c:type="GstCheckLogFilter" disguised="1">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.h"
           line="74">Opaque structure containing data about a log filter
function.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="80"/>
    </record>
    <callback name="CheckLogFilterFunc"
              c:type="GstCheckLogFilterFunc"
              version="1.12">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.h"
           line="82">A function that is called for messages matching the filter added by
@gst_check_add_log_filter.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="96"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.h"
             line="92">%TRUE if message should be discarded by GstCheck.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="log_domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.h"
               line="84">the log domain of the message</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="log_level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.h"
               line="85">the log level of the message</doc>
          <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.h"
               line="86">the message that has occurred</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.h"
               line="87">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Harness" c:type="GstHarness" version="1.6">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="21">#GstHarness is meant to make writing unit test for GStreamer much easier.
It can be thought of as a way of treating a #GstElement as a black box,
deterministically feeding it data, and controlling what data it outputs.

The basic structure of #GstHarness is two "floating" #GstPads that connect
to the harnessed #GstElement src and sink #GstPads like so:

|[
          __________________________
 _____   |  _____            _____  |   _____
|     |  | |     |          |     | |  |     |
| src |--+-| sink|  Element | src |-+--| sink|
|_____|  | |_____|          |_____| |  |_____|
         |__________________________|

]|

With this, you can now simulate any environment the #GstElement might find
itself in. By specifying the #GstCaps of the harness #GstPads, using
functions like gst_harness_set_src_caps() or gst_harness_set_sink_caps_str(),
you can test how the #GstElement interacts with different caps sets.

Your harnessed #GstElement can of course also be a bin, and using
gst_harness_new_parse() supporting standard gst-launch syntax, you can
easily test a whole pipeline instead of just one element.

You can then go on to push #GstBuffers and #GstEvents on to the srcpad,
using functions like gst_harness_push() and gst_harness_push_event(), and
then pull them out to examine them with gst_harness_pull() and
gst_harness_pull_event().

## A simple buffer-in buffer-out example

|[&lt;!-- language="C" --&gt;
  #include &lt;gst/gst.h&gt;
  #include &lt;gst/check/gstharness.h&gt;
  GstHarness *h;
  GstBuffer *in_buf;
  GstBuffer *out_buf;

  // attach the harness to the src and sink pad of GstQueue
  h = gst_harness_new ("queue");

  // we must specify a caps before pushing buffers
  gst_harness_set_src_caps_str (h, "mycaps");

  // create a buffer of size 42
  in_buf = gst_harness_create_buffer (h, 42);

  // push the buffer into the queue
  gst_harness_push (h, in_buf);

  // pull the buffer from the queue
  out_buf = gst_harness_pull (h);

  // validate the buffer in is the same as buffer out
  fail_unless (in_buf == out_buf);

  // cleanup
  gst_buffer_unref (out_buf);
  gst_harness_teardown (h);

  ]|

Another main feature of the #GstHarness is its integration with the
#GstTestClock. Operating the #GstTestClock can be very challenging, but
#GstHarness simplifies some of the most desired actions a lot, like wanting
to manually advance the clock while at the same time releasing a #GstClockID
that is waiting, with functions like gst_harness_crank_single_clock_wait().

#GstHarness also supports sub-harnesses, as a way of generating and
validating data. A sub-harness is another #GstHarness that is managed by
the "parent" harness, and can either be created by using the standard
gst_harness_new type functions directly on the (GstHarness *)-&gt;src_harness,
or using the much more convenient gst_harness_add_src() or
gst_harness_add_sink_parse(). If you have a decoder-element you want to test,
(like vp8dec) it can be very useful to add a src-harness with both a
src-element (videotestsrc) and an encoder (vp8enc) to feed the decoder data
with different configurations, by simply doing:

|[&lt;!-- language="C" --&gt;
  GstHarness * h = gst_harness_new (h, "vp8dec");
  gst_harness_add_src_parse (h, "videotestsrc is-live=1 ! vp8enc", TRUE);
]|

and then feeding it data with:

|[&lt;!-- language="C" --&gt;
gst_harness_push_from_src (h);
]|</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="63"/>
      <field name="element" writable="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.h"
             line="44">the element inside the harness</doc>
        <type name="Gst.Element" c:type="GstElement*"/>
      </field>
      <field name="srcpad" writable="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.h"
             line="45">the internal harness source pad</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="sinkpad" writable="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.h"
             line="46">the internal harness sink pad</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="src_harness" writable="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.h"
             line="47">the source (input) harness (if any)</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </field>
      <field name="sink_harness" writable="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.h"
             line="48">the sink (output) harness (if any)</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HarnessPrivate" c:type="GstHarnessPrivate*"/>
      </field>
      <method name="add_element_full"
              c:identifier="gst_harness_add_element_full"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="716">Adds a #GstElement to an empty #GstHarness

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="718">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="719">a #GstElement to add to the harness (transfer none)</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
          <parameter name="hsrc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="720">a #GstStaticPadTemplate describing the harness srcpad.
%NULL will not create a harness srcpad.</doc>
            <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
          </parameter>
          <parameter name="element_sinkpad_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="722">a #gchar with the name of the element
sinkpad that is then linked to the harness srcpad. Can be a static or request
or a sometimes pad that has been added. %NULL will not get/request a sinkpad
from the element. (Like if the element is a src.)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hsink"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="726">a #GstStaticPadTemplate describing the harness sinkpad.
%NULL will not create a harness sinkpad.</doc>
            <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
          </parameter>
          <parameter name="element_srcpad_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="728">a #gchar with the name of the element
srcpad that is then linked to the harness sinkpad, similar to the
@element_sinkpad_name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_element_sink_pad"
              c:identifier="gst_harness_add_element_sink_pad"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1198">Links the specified #GstPad the @GstHarness srcpad.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1200">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="sinkpad" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1201">a #GstPad to link to the harness srcpad</doc>
            <type name="Gst.Pad" c:type="GstPad*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_element_src_pad"
              c:identifier="gst_harness_add_element_src_pad"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1172">Links the specified #GstPad the @GstHarness sinkpad. This can be useful if
perhaps the srcpad did not exist at the time of creating the harness,
like a demuxer that provides a sometimes-pad after receiving data.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1174">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="srcpad" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1175">a #GstPad to link to the harness sinkpad</doc>
            <type name="Gst.Pad" c:type="GstPad*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_parse"
              c:identifier="gst_harness_add_parse"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="948">Parses the @launchline and puts that in a #GstBin,
and then attches the supplied #GstHarness to the bin.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="950">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="launchline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="951">a #gchar describing a gst-launch type line</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_probe"
              c:identifier="gst_harness_add_probe"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2769">A convenience function to allows you to call gst_pad_add_probe on a
#GstPad of a #GstElement that are residing inside the #GstHarness,
by using normal gst_pad_add_probe syntax

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="345"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2771">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2772">a #gchar with a #GstElementFactory name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pad_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2773">a #gchar with the name of the pad to attach the probe to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2774">a #GstPadProbeType (see gst_pad_add_probe)</doc>
            <type name="Gst.PadProbeType" c:type="GstPadProbeType"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2775">a #GstPadProbeCallback (see gst_pad_add_probe)</doc>
            <type name="Gst.PadProbeCallback" c:type="GstPadProbeCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2776">a #gpointer (see gst_pad_add_probe)</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy_data"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2777">a #GDestroyNotify (see gst_pad_add_probe)</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_propose_allocation_meta"
              c:identifier="gst_harness_add_propose_allocation_meta"
              version="1.16">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2277">Add api with params as one of the supported metadata API to propose when
receiving an allocation query.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="276"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2279">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="api" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2280">a metadata API</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2281">API specific parameters</doc>
            <type name="Gst.Structure" c:type="const GstStructure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_sink"
              c:identifier="gst_harness_add_sink"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2558">Similar to gst_harness_add_sink_harness, this is a convenience to
directly create a sink-harness using the @sink_element_name name specified.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="315"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2560">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="sink_element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2561">a #gchar with the name of a #GstElement</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_sink_harness"
              c:identifier="gst_harness_add_sink_harness"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2506">Similar to gst_harness_add_src, this allows you to send the data coming out
of your harnessed #GstElement to a sink-element, allowing to test different
responses the element output might create in sink elements. An example might
be an existing sink providing some analytical data on the input it receives that
can be useful to your testing. If the goal is to test a sink-element itself,
this is better achieved using gst_harness_new directly on the sink.

If a sink-harness already exists it will be replaced.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="311"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2508">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="sink_harness" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2509">a #GstHarness to be added as a sink-harness.</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_sink_parse"
              c:identifier="gst_harness_add_sink_parse"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2577">Similar to gst_harness_add_sink, this allows you to specify a launch-line
instead of just an element name. See gst_harness_add_src_parse for details.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="319"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2579">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="launchline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2580">a #gchar with the name of a #GstElement</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_src" c:identifier="gst_harness_add_src" version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2346">Similar to gst_harness_add_src_harness, this is a convenience to
directly create a src-harness using the @src_element_name name specified.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="288"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2348">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="src_element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2349">a #gchar with the name of a #GstElement</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_clock_wait" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2350">a #gboolean specifying if the #GstElement uses
gst_clock_wait_id internally.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_src_harness"
              c:identifier="gst_harness_add_src_harness"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2309">A src-harness is a great way of providing the #GstHarness with data.
By adding a src-type #GstElement, it is then easy to use functions like
gst_harness_push_from_src or gst_harness_src_crank_and_push_many
to provide your harnessed element with input. The @has_clock_wait variable
is a great way to control you src-element with, in that you can have it
produce a buffer for you by simply cranking the clock, and not have it
spin out of control producing buffers as fast as possible.

If a src-harness already exists it will be replaced.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="283"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2311">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="src_harness" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2312">a #GstHarness to be added as a src-harness.</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </parameter>
          <parameter name="has_clock_wait" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2313">a #gboolean specifying if the #GstElement uses
gst_clock_wait_id internally.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_src_parse"
              c:identifier="gst_harness_add_src_parse"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2368">Similar to gst_harness_add_src, this allows you to specify a launch-line,
which can be useful for both having more then one #GstElement acting as your
src (Like a src producing raw buffers, and then an encoder, providing encoded
data), but also by allowing you to set properties like "is-live" directly on
the elements.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2370">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="launchline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2371">a #gchar describing a gst-launch type line</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_clock_wait" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2372">a #gboolean specifying if the #GstElement uses
gst_clock_wait_id internally.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="buffers_in_queue"
              c:identifier="gst_harness_buffers_in_queue"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1799">The number of #GstBuffers currently in the #GstHarness sinkpad #GAsyncQueue

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1807">a #guint number of buffers in the queue</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1801">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="buffers_received"
              c:identifier="gst_harness_buffers_received"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1778">The total number of #GstBuffers that has arrived on the #GstHarness sinkpad.
This number includes buffers that have been dropped as well as buffers
that have already been pulled out.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1788">a #guint number of buffers received</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1780">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="crank_multiple_clock_waits"
              c:identifier="gst_harness_crank_multiple_clock_waits"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1469">Similar to gst_harness_crank_single_clock_wait(), this is the function to use
if your harnessed element(s) are using more then one gst_clock_id_wait.
Failing to do so can (and will) make it racy which #GstClockID you actually
are releasing, where as this function will process all the waits at the
same time, ensuring that one thread can't register another wait before
both are released.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1483">a @gboolean %TRUE if the "crank" was successful, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1471">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="waits" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1472">a #guint describing the number of #GstClockIDs to crank</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="crank_single_clock_wait"
              c:identifier="gst_harness_crank_single_clock_wait"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1444">A "crank" consists of three steps:
1: Wait for a #GstClockID to be registered with the #GstTestClock.
2: Advance the #GstTestClock to the time the #GstClockID is waiting for.
3: Release the #GstClockID wait.
Together, this provides an easy way to not have to think about the details
around clocks and time, but still being able to write deterministic tests
that are dependent on this. A "crank" can be though of as the notion of
manually driving the clock forward to its next logical step.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1459">a @gboolean %TRUE if the "crank" was successful, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1446">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_buffer"
              c:identifier="gst_harness_create_buffer"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1595">Allocates a buffer using a #GstBufferPool if present, or else using the
configured #GstAllocator and #GstAllocationParams

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="180"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1605">a #GstBuffer of size @size</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1597">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1598">a #gsize specifying the size of the buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump_to_file"
              c:identifier="gst_harness_dump_to_file"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1930">Allows you to dump the #GstBuffers the #GstHarness sinkpad #GAsyncQueue
to a file.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="207"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1932">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1933">a #gchar with a the name of a file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="events_in_queue"
              c:identifier="gst_harness_events_in_queue"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2059">The number of #GstEvents currently in the #GstHarness sinkpad #GAsyncQueue

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2067">a #guint number of events in the queue</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2061">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="events_received"
              c:identifier="gst_harness_events_received"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2038">The total number of #GstEvents that has arrived on the #GstHarness sinkpad
This number includes events handled by the harness as well as events
that have already been pulled out.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2048">a #guint number of events received</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2040">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_element"
              c:identifier="gst_harness_find_element"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2647">Most useful in conjunction with gst_harness_new_parse, this will scan the
#GstElements inside the #GstHarness, and check if any of them matches
@element_name. Typical usecase being that you need to access one of the
harnessed elements for properties and/or signals.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="331"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2659">a #GstElement or %NULL if not found</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2649">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2650">a #gchar with a #GstElementFactory name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get"
              c:identifier="gst_harness_get"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2741">A convenience function to allows you to call g_object_get on a #GstElement
that are residing inside the #GstHarness, by using normal g_object_get
syntax.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="340"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2743">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2744">a #gchar with a #GstElementFactory name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2745">a #gchar with the first property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2746">return location for the first property, followed optionally by more
 name/return location pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allocator"
              c:identifier="gst_harness_get_allocator"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2227">Gets the @allocator and its @params that has been decided to use after an
allocation query.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2229">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="allocator"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2230">the #GstAllocator used</doc>
            <type name="Gst.Allocator" c:type="GstAllocator**"/>
          </parameter>
          <parameter name="params"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2231">the #GstAllocationParams of
  @allocator</doc>
            <type name="Gst.AllocationParams" c:type="GstAllocationParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_pushed_timestamp"
              c:identifier="gst_harness_get_last_pushed_timestamp"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1957">Get the timestamp of the last #GstBuffer pushed on the #GstHarness srcpad,
typically with gst_harness_push or gst_harness_push_from_src.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1966">a #GstClockTime with the timestamp or %GST_CLOCK_TIME_NONE if no
#GstBuffer has been pushed on the #GstHarness srcpad</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1959">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_testclock"
              c:identifier="gst_harness_get_testclock"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1378">Get the #GstTestClock. Useful if specific operations on the testclock is
needed.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="149"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1387">a #GstTestClock, or %NULL if the testclock is not
present.</doc>
          <type name="TestClock" c:type="GstTestClock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1380">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="play" c:identifier="gst_harness_play" version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1502">This will set the harnessed #GstElement to %GST_STATE_PLAYING.
#GstElements without a sink-#GstPad and with the %GST_ELEMENT_FLAG_SOURCE
flag set is considered a src #GstElement
Non-src #GstElements (like sinks and filters) are automatically set to
playing by the #GstHarness, but src #GstElements are not to avoid them
starting to produce buffers.
Hence, for src #GstElement you must call gst_harness_play() explicitly.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1504">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pull" c:identifier="gst_harness_pull" version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1663">Pulls a #GstBuffer from the #GAsyncQueue on the #GstHarness sinkpad. The pull
will timeout in 60 seconds. This is the standard way of getting a buffer
from a harnessed #GstElement.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1673">a #GstBuffer or %NULL if timed out.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1665">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pull_event"
              c:identifier="gst_harness_pull_event"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1997">Pulls an #GstEvent from the #GAsyncQueue on the #GstHarness sinkpad.
Timeouts after 60 seconds similar to gst_harness_pull.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="227"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2006">a #GstEvent or %NULL if timed out.</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1999">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pull_until_eos"
              c:identifier="gst_harness_pull_until_eos"
              version="1.18">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1693">Pulls a #GstBuffer from the #GAsyncQueue on the #GstHarness sinkpad. The pull
will block until an EOS event is received, or timeout in 60 seconds.
MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1703">%TRUE on success, %FALSE on timeout.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1695">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1696">A #GstBuffer, or %NULL if EOS or timeout occures
  first.</doc>
            <type name="Gst.Buffer" c:type="GstBuffer**"/>
          </parameter>
        </parameters>
      </method>
      <method name="pull_upstream_event"
              c:identifier="gst_harness_pull_upstream_event"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2100">Pulls an #GstEvent from the #GAsyncQueue on the #GstHarness srcpad.
Timeouts after 60 seconds similar to gst_harness_pull.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="244"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2109">a #GstEvent or %NULL if timed out.</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2102">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="gst_harness_push" version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1640">Pushes a #GstBuffer on the #GstHarness srcpad. The standard way of
interacting with an harnessed element.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1650">a #GstFlowReturn with the result from the push</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1642">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1643">a #GstBuffer to push</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_and_pull"
              c:identifier="gst_harness_push_and_pull"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1756">Basically a gst_harness_push and a gst_harness_pull in one line. Reflects
the fact that you often want to do exactly this in your test: Push one buffer
in, and inspect the outcome.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="195"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1767">a #GstBuffer or %NULL if timed out.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1758">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1759">a #GstBuffer to push</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_event"
              c:identifier="gst_harness_push_event"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1978">Pushes an #GstEvent on the #GstHarness srcpad.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1987">a #gboolean with the result from the push</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1980">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1981">a #GstEvent to push</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_from_src"
              c:identifier="gst_harness_push_from_src"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2393">Transfer data from the src-#GstHarness to the main-#GstHarness. It consists
of 4 steps:
1: Make sure the src is started. (see: gst_harness_play)
2: Crank the clock (see: gst_harness_crank_single_clock_wait)
3: Pull a #GstBuffer from the src-#GstHarness (see: gst_harness_pull)
4: Push the same #GstBuffer into the main-#GstHarness (see: gst_harness_push)

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2406">a #GstFlowReturn with the result of the push</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2395">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push_to_sink"
              c:identifier="gst_harness_push_to_sink"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2596">Transfer one #GstBuffer from the main-#GstHarness to the sink-#GstHarness.
See gst_harness_push_from_src for details.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="323"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2605">a #GstFlowReturn with the result of the push</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2598">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push_upstream_event"
              c:identifier="gst_harness_push_upstream_event"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2078">Pushes an #GstEvent on the #GstHarness sinkpad.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2087">a #gboolean with the result from the push</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2080">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2081">a #GstEvent to push</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_latency"
              c:identifier="gst_harness_query_latency"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2181">Get the min latency reported by any harnessed #GstElement.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="258"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2189">a #GstClockTime with min latency</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2183">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set"
              c:identifier="gst_harness_set"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2713">A convenience function to allows you to call g_object_set on a #GstElement
that are residing inside the #GstHarness, by using normal g_object_set
syntax.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="335"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2715">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2716">a #gchar with a #GstElementFactory name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2717">a #gchar with the first property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2718">value for the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_blocking_push_mode"
              c:identifier="gst_harness_set_blocking_push_mode"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1530">Setting this will make the harness block in the chain-function, and
then release when gst_harness_pull() or gst_harness_try_pull() is called.
Can be useful when wanting to control a src-element that is not implementing
gst_clock_id_wait() so it can't be controlled by the #GstTestClock, since
it otherwise would produce buffers as fast as possible.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1532">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_caps"
              c:identifier="gst_harness_set_caps"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1270">Sets the @GstHarness srcpad and sinkpad caps.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1272">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1273">a #GstCaps to set on the harness srcpad</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="out" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1274">a #GstCaps to set on the harness sinkpad</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_caps_str"
              c:identifier="gst_harness_set_caps_str"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1324">Sets the @GstHarness srcpad and sinkpad caps using strings.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1326">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1327">a @gchar describing a #GstCaps to set on the harness srcpad</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1328">a @gchar describing a #GstCaps to set on the harness sinkpad</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drop_buffers"
              c:identifier="gst_harness_set_drop_buffers"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1818">When set to %TRUE, instead of placing the buffers arriving from the harnessed
#GstElement inside the sinkpads #GAsyncQueue, they are instead unreffed.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1820">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="drop_buffers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1821">a #gboolean specifying to drop outgoing buffers or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_forwarding"
              c:identifier="gst_harness_set_forwarding"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1551">As a convenience, a src-harness will forward %GST_EVENT_STREAM_START,
%GST_EVENT_CAPS and %GST_EVENT_SEGMENT to the main-harness if forwarding
is enabled, and forward any sticky-events from the main-harness to
the sink-harness. It will also forward the %GST_QUERY_ALLOCATION.

If forwarding is disabled, the user will have to either manually push
these events from the src-harness using gst_harness_src_push_event(), or
create and push them manually. While this will allow full control and
inspection of these events, for the most cases having forwarding enabled
will be sufficient when writing a test where the src-harness' main function
is providing data for the main-harness.

Forwarding is enabled by default.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1553">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="forwarding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1554">a #gboolean to enable/disable forwarding</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_propose_allocator"
              c:identifier="gst_harness_set_propose_allocator"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2253">Sets the @allocator and @params to propose when receiving an allocation
query.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2255">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="allocator"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2256">a #GstAllocator</doc>
            <type name="Gst.Allocator" c:type="GstAllocator*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2257">a #GstAllocationParams</doc>
            <type name="Gst.AllocationParams"
                  c:type="const GstAllocationParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sink_caps"
              c:identifier="gst_harness_set_sink_caps"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1250">Sets the @GstHarness sinkpad caps.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1252">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="caps" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1253">a #GstCaps to set on the harness sinkpad</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sink_caps_str"
              c:identifier="gst_harness_set_sink_caps_str"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1307">Sets the @GstHarness sinkpad caps using a string.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1309">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1310">a @gchar describing a #GstCaps to set on the harness sinkpad</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_src_caps"
              c:identifier="gst_harness_set_src_caps"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1222">Sets the @GstHarness srcpad caps. This must be done before any buffers
can legally be pushed from the harness to the element.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1224">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="caps" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1225">a #GstCaps to set on the harness srcpad</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_src_caps_str"
              c:identifier="gst_harness_set_src_caps_str"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1289">Sets the @GstHarness srcpad caps using a string. This must be done before
any buffers can legally be pushed from the harness to the element.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1291">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1292">a @gchar describing a #GstCaps to set on the harness srcpad</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time"
              c:identifier="gst_harness_set_time"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1398">Advance the #GstTestClock to a specific time.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1407">a @gboolean %TRUE if the time could be set. %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1400">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1401">a #GstClockTime to advance the clock to</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_upstream_latency"
              c:identifier="gst_harness_set_upstream_latency"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2211">Sets the min latency reported by #GstHarness when receiving a latency-query</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2213">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="latency" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2214">a #GstClockTime specifying the latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="sink_push_many"
              c:identifier="gst_harness_sink_push_many"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2619">Convenience that calls gst_harness_push_to_sink @pushes number of times.
Will abort the pushing if any one push fails.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="326"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2629">a #GstFlowReturn with the result of the push</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2621">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="pushes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2622">a #gint with the number of calls to gst_harness_push_to_sink</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="src_crank_and_push_many"
              c:identifier="gst_harness_src_crank_and_push_many"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2432">Transfer data from the src-#GstHarness to the main-#GstHarness. Similar to
gst_harness_push_from_src, this variant allows you to specify how many cranks
and how many pushes to perform. This can be useful for both moving a lot
of data at the same time, as well as cases when one crank does not equal one
buffer to push and v.v.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="301"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2446">a #GstFlowReturn with the result of the push</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2434">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="cranks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2435">a #gint with the number of calls to gst_harness_crank_single_clock_wait</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="pushes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2436">a #gint with the number of calls to gst_harness_push</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="src_push_event"
              c:identifier="gst_harness_src_push_event"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2477">Similar to what gst_harness_src_push does with #GstBuffers, this transfers
a #GstEvent from the src-#GstHarness to the main-#GstHarness. Note that
some #GstEvents are being transferred automagically. Look at sink_forward_pad
for details.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="306"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2488">a #gboolean with the result of the push</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2479">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stress_custom_start"
              c:identifier="gst_harness_stress_custom_start"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3166">Start a custom stress-thread that will call your @callback for every
iteration allowing you to do something nasty.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="359"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3180">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3168">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="init"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3169">a #GFunc that is called initially and only once</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" closure="2">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3170">a #GFunc that is called as often as possible</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3171">a #gpointer with custom data to pass to the @callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3172">a #gulong specifying how long to sleep in (microseconds) for
each call to the @callback</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_property_start_full"
              c:identifier="gst_harness_stress_property_start_full"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3427">Call g_object_set with @name and @value in intervals of @sleep microseconds

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="453"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3439">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3429">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3430">a #gchar specifying a property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3431">a #GValue to set the property to</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3432">a #gulong specifying how long to sleep in (microseconds) for
each g_object_set with @name and @value</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_push_buffer_start_full"
              c:identifier="gst_harness_stress_push_buffer_start_full"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3239">Push a #GstBuffer in intervals of @sleep microseconds.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="376"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3252">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3241">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3242">a #GstCaps for the #GstBuffer</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3243">a #GstSegment</doc>
            <type name="Gst.Segment" c:type="const GstSegment*"/>
          </parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3244">a #GstBuffer to push</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3245">a #gulong specifying how long to sleep in (microseconds) for
each call to gst_pad_push</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_push_buffer_with_cb_start_full"
              c:identifier="gst_harness_stress_push_buffer_with_cb_start_full"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3265">Push a #GstBuffer returned by @func in intervals of @sleep microseconds.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="395"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3281">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3267">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3268">a #GstCaps for the #GstBuffer</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3269">a #GstSegment</doc>
            <type name="Gst.Segment" c:type="const GstSegment*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3270">a #GstHarnessPrepareBufferFunc function called before every iteration
to prepare / create a #GstBuffer for pushing</doc>
            <type name="HarnessPrepareBufferFunc"
                  c:type="GstHarnessPrepareBufferFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3272">a #gpointer with data to the #GstHarnessPrepareBufferFunc function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3273">a #GDestroyNotify that is called when thread is stopped</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3274">a #gulong specifying how long to sleep in (microseconds) for
each call to gst_pad_push</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_push_event_start_full"
              c:identifier="gst_harness_stress_push_event_start_full"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3305">Push the @event onto the harnessed #GstElement sinkpad in intervals of
@sleep microseconds

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="407"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3317">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3307">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3308">a #GstEvent to push</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3309">a #gulong specifying how long to sleep in (microseconds) for
each gst_event_push with @event</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_push_event_with_cb_start_full"
              c:identifier="gst_harness_stress_push_event_with_cb_start_full"
              version="1.8"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3330">Push a #GstEvent returned by @func onto the harnessed #GstElement sinkpad
in intervals of @sleep microseconds.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="424"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3345">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3332">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3333">a #GstHarnessPrepareEventFunc function called before every iteration
to prepare / create a #GstEvent for pushing</doc>
            <type name="HarnessPrepareEventFunc"
                  c:type="GstHarnessPrepareEventFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3335">a #gpointer with data to the #GstHarnessPrepareEventFunc function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3336">a #GDestroyNotify that is called when thread is stopped</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3337">a #gulong specifying how long to sleep in (microseconds) for
each call to gst_pad_push</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_push_upstream_event_start_full"
              c:identifier="gst_harness_stress_push_upstream_event_start_full"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3366">Push the @event onto the harnessed #GstElement srcpad in intervals of
@sleep microseconds.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="434"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3378">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3368">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3369">a #GstEvent to push</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3370">a #gulong specifying how long to sleep in (microseconds) for
each gst_event_push with @event</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_push_upstream_event_with_cb_start_full"
              c:identifier="gst_harness_stress_push_upstream_event_with_cb_start_full"
              version="1.8"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3391">Push a #GstEvent returned by @func onto the harnessed #GstElement srcpad
in intervals of @sleep microseconds.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="442"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3406">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3393">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3394">a #GstHarnessPrepareEventFunc function called before every iteration
to prepare / create a #GstEvent for pushing</doc>
            <type name="HarnessPrepareEventFunc"
                  c:type="GstHarnessPrepareEventFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3396">a #gpointer with data to the #GstHarnessPrepareEventFunc function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3397">a #GDestroyNotify that is called when thread is stopped</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3398">a #gulong specifying how long to sleep in (microseconds) for
each call to gst_pad_push</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_requestpad_start_full"
              c:identifier="gst_harness_stress_requestpad_start_full"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3459">Call gst_element_request_pad in intervals of @sleep microseconds

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="462"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3473">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3461">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="templ" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3462">a #GstPadTemplate</doc>
            <type name="Gst.PadTemplate" c:type="GstPadTemplate*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3463">a #gchar</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3464">a #GstCaps</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="release" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3465">a #gboolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3466">a #gulong specifying how long to sleep in (microseconds) for
each gst_element_request_pad</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="stress_statechange_start_full"
              c:identifier="gst_harness_stress_statechange_start_full"
              version="1.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3200">Change the state of your harnessed #GstElement from NULL to PLAYING and
back again, only pausing for @sleep microseconds every time.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="369"/>
        <return-value>
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3211">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3202">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="sleep" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3203">a #gulong specifying how long to sleep in (microseconds) for
each state-change</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_all_data"
              c:identifier="gst_harness_take_all_data"
              shadowed-by="take_all_data_as_bytes"
              version="1.14"
              introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1877">Pulls all pending data from the harness and returns it as a single
data slice.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="210"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1885">a pointer to the data, newly allocated. Free
    with g_free() when no longer needed. Will return %NULL if there is no
    data.</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1879">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1880">the size of the data in bytes</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_all_data_as_buffer"
              c:identifier="gst_harness_take_all_data_as_buffer"
              version="1.14">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1837">Pulls all pending data from the harness and returns it as a single buffer.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="213"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1843">the data as a buffer. Unref with gst_buffer_unref()
    when no longer needed.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1839">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="take_all_data_as_bytes"
              c:identifier="gst_harness_take_all_data_as_bytes"
              shadows="take_all_data"
              version="1.14">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1906">Pulls all pending data from the harness and returns it as a single #GBytes.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="216"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1912">a pointer to the data, newly allocated. Free
    with g_free() when no longer needed.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1908">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="teardown"
              c:identifier="gst_harness_teardown"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1044">Tears down a @GstHarness, freeing all resources allocated using it.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1046">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="try_pull"
              c:identifier="gst_harness_try_pull"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1727">Pulls a #GstBuffer from the #GAsyncQueue on the #GstHarness sinkpad. Unlike
gst_harness_pull this will not wait for any buffers if not any are present,
and return %NULL straight away.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="189"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1737">a #GstBuffer or %NULL if no buffers are present in the #GAsyncQueue</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1729">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="try_pull_event"
              c:identifier="gst_harness_try_pull_event"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2018">Pulls an #GstEvent from the #GAsyncQueue on the #GstHarness sinkpad.
See gst_harness_try_pull for details.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="230"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2027">a #GstEvent or %NULL if no buffers are present in the #GAsyncQueue</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2020">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="try_pull_upstream_event"
              c:identifier="gst_harness_try_pull_upstream_event"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2121">Pulls an #GstEvent from the #GAsyncQueue on the #GstHarness srcpad.
See gst_harness_try_pull for details.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="247"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2130">a #GstEvent or %NULL if no buffers are present in the #GAsyncQueue</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2123">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="upstream_events_in_queue"
              c:identifier="gst_harness_upstream_events_in_queue"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2162">The number of #GstEvents currently in the #GstHarness srcpad #GAsyncQueue

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="253"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2170">a #guint number of events in the queue</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2164">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="upstream_events_received"
              c:identifier="gst_harness_upstream_events_received"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="2141">The total number of #GstEvents that has arrived on the #GstHarness srcpad
This number includes events handled by the harness as well as events
that have already been pulled out.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="2151">a #guint number of events received</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="2143">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use_systemclock"
              c:identifier="gst_harness_use_systemclock"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1343">Sets the system #GstClock on the @GstHarness #GstElement

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1345">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use_testclock"
              c:identifier="gst_harness_use_testclock"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1362">Sets the #GstTestClock on the #GstHarness #GstElement

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1364">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wait_for_clock_id_waits"
              c:identifier="gst_harness_wait_for_clock_id_waits"
              version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1418">Waits for @timeout seconds until @waits number of #GstClockID waits is
registered with the #GstTestClock. Useful for writing deterministic tests,
where you want to make sure that an expected number of waits have been
reached.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1432">a @gboolean %TRUE if the waits have been registered, %FALSE if not.
(Could be that it timed out waiting or that more waits than waits was found)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="h" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1420">a #GstHarness</doc>
            <type name="Harness" c:type="GstHarness*"/>
          </instance-parameter>
          <parameter name="waits" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1421">a #guint describing the numbers of #GstClockID registered with
the #GstTestClock</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1423">a #guint describing how many seconds to wait for @waits to be true</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="gst_harness_new"
                version="1.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="928">Creates a new harness. Works like gst_harness_new_with_padnames(), except it
assumes the #GstElement sinkpad is named "sink" and srcpad is named "src"

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="937">a #GstHarness, or %NULL if the harness could
not be created</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </return-value>
        <parameters>
          <parameter name="element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="930">a #gchar describing the #GstElement name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_empty"
                c:identifier="gst_harness_new_empty"
                version="1.8"
                introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="658">Creates a new empty harness. Use gst_harness_add_element_full() to add
an #GstElement to it.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="666">a #GstHarness, or %NULL if the harness could
not be created</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </return-value>
      </function>
      <function name="new_full"
                c:identifier="gst_harness_new_full"
                version="1.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="798">Creates a new harness.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="817">a #GstHarness, or %NULL if the harness could
not be created</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </return-value>
        <parameters>
          <parameter name="element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="800">a #GstElement to attach the harness to (transfer none)</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
          <parameter name="hsrc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="801">a #GstStaticPadTemplate describing the harness srcpad.
%NULL will not create a harness srcpad.</doc>
            <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
          </parameter>
          <parameter name="element_sinkpad_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="803">a #gchar with the name of the element
sinkpad that is then linked to the harness srcpad. Can be a static or request
or a sometimes pad that has been added. %NULL will not get/request a sinkpad
from the element. (Like if the element is a src.)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hsink"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="807">a #GstStaticPadTemplate describing the harness sinkpad.
%NULL will not create a harness sinkpad.</doc>
            <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
          </parameter>
          <parameter name="element_srcpad_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="809">a #gchar with the name of the element
srcpad that is then linked to the harness sinkpad, similar to the
@element_sinkpad_name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_parse"
                c:identifier="gst_harness_new_parse"
                version="1.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1021">Creates a new harness, parsing the @launchline and putting that in a #GstBin,
and then attches the harness to the bin.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1030">a #GstHarness, or %NULL if the harness could
not be created</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </return-value>
        <parameters>
          <parameter name="launchline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="1023">a #gchar describing a gst-launch type line</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_with_element"
                c:identifier="gst_harness_new_with_element"
                version="1.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="834">Creates a new harness. Works in the same way as gst_harness_new_full(), only
that generic padtemplates are used for the harness src and sinkpads, which
will be sufficient in most usecases.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="850">a #GstHarness, or %NULL if the harness could
not be created</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </return-value>
        <parameters>
          <parameter name="element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="836">a #GstElement to attach the harness to (transfer none)</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
          <parameter name="element_sinkpad_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="837">a #gchar with the name of the element
sinkpad that is then linked to the harness srcpad. %NULL does not attach a
sinkpad</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="element_srcpad_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="840">a #gchar with the name of the element
srcpad that is then linked to the harness sinkpad. %NULL does not attach a
srcpad</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_with_padnames"
                c:identifier="gst_harness_new_with_padnames"
                version="1.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="863">Creates a new harness. Works like gst_harness_new_with_element(),
except you specify the factoryname of the #GstElement

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="878">a #GstHarness, or %NULL if the harness could
not be created</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </return-value>
        <parameters>
          <parameter name="element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="865">a #gchar describing the #GstElement name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="element_sinkpad_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="866">a #gchar with the name of the element
sinkpad that is then linked to the harness srcpad. %NULL does not attach a
sinkpad</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="element_srcpad_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="869">a #gchar with the name of the element
srcpad that is then linked to the harness sinkpad. %NULL does not attach a
srcpad</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_with_templates"
                c:identifier="gst_harness_new_with_templates"
                version="1.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="897">Creates a new harness, like gst_harness_new_full(), except it
assumes the #GstElement sinkpad is named "sink" and srcpad is named "src"

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="910">a #GstHarness, or %NULL if the harness could
not be created</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </return-value>
        <parameters>
          <parameter name="element_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="899">a #gchar describing the #GstElement name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hsrc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="900">a #GstStaticPadTemplate describing the harness srcpad.
%NULL will not create a harness srcpad.</doc>
            <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
          </parameter>
          <parameter name="hsink"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="902">a #GstStaticPadTemplate describing the harness sinkpad.
%NULL will not create a harness sinkpad.</doc>
            <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
          </parameter>
        </parameters>
      </function>
      <function name="stress_thread_stop"
                c:identifier="gst_harness_stress_thread_stop"
                version="1.6">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="3144">Stop the running #GstHarnessThread

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gstharness.h" line="356"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gstharness.c"
                 line="3146">a #GstHarnessThread</doc>
            <type name="HarnessThread" c:type="GstHarnessThread*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="HarnessPrepareBufferFunc"
              c:type="GstHarnessPrepareBufferFunc"
              version="1.6">
      <source-position filename="..\libs\gst\check\gstharness.h" line="389"/>
      <return-value transfer-ownership="full">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="h" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.h"
               line="384">a #GstHarness</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.h"
               line="385">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="HarnessPrepareEventFunc"
              c:type="GstHarnessPrepareEventFunc"
              version="1.8">
      <source-position filename="..\libs\gst\check\gstharness.h" line="418"/>
      <return-value transfer-ownership="full">
        <type name="Gst.Event" c:type="GstEvent*"/>
      </return-value>
      <parameters>
        <parameter name="h" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.h"
               line="413">a #GstHarness</doc>
          <type name="Harness" c:type="GstHarness*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.h"
               line="414">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="HarnessPrivate" c:type="GstHarnessPrivate" disguised="1">
      <source-position filename="..\libs\gst\check\gstharness.h" line="40"/>
    </record>
    <record name="HarnessThread"
            c:type="GstHarnessThread"
            disguised="1"
            version="1.6">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.h"
           line="30">Opaque handle representing a GstHarness stress testing thread.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="37"/>
    </record>
    <function-macro name="IS_TEST_CLOCK"
                    c:identifier="GST_IS_TEST_CLOCK"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEST_CLOCK_CLASS"
                    c:identifier="GST_IS_TEST_CLOCK_CLASS"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="39"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <record name="StreamConsistency"
            c:type="GstStreamConsistency"
            disguised="1">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstconsistencychecker.h"
           line="30">Opaque consistency checker handle.</doc>
      <source-position filename="..\libs\gst\check\gstconsistencychecker.h"
                       line="35"/>
    </record>
    <function-macro name="TEST_CLOCK"
                    c:identifier="GST_TEST_CLOCK"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEST_CLOCK_CAST"
                    c:identifier="GST_TEST_CLOCK_CAST"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEST_CLOCK_CLASS"
                    c:identifier="GST_TEST_CLOCK_CLASS"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="37"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEST_CLOCK_GET_CLASS"
                    c:identifier="GST_TEST_CLOCK_GET_CLASS"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="TestClock"
           c:symbol-prefix="test_clock"
           c:type="GstTestClock"
           version="1.2"
           parent="Gst.Clock"
           glib:type-name="GstTestClock"
           glib:get-type="gst_test_clock_get_type"
           glib:type-struct="TestClockClass">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gsttestclock.c"
           line="24">GstTestClock is an implementation of #GstClock which has different
behaviour compared to #GstSystemClock. Time for #GstSystemClock advances
according to the system time, while time for #GstTestClock changes only
when gst_test_clock_set_time() or gst_test_clock_advance_time() are
called. #GstTestClock provides unit tests with the possibility to
precisely advance the time in a deterministic manner, independent of the
system time or any other external factors.

## Advancing the time of a #GstTestClock

|[&lt;!-- language="C" --&gt;
  #include &lt;gst/gst.h&gt;
  #include &lt;gst/check/gsttestclock.h&gt;

  GstClock *clock;
  GstTestClock *test_clock;

  clock = gst_test_clock_new ();
  test_clock = GST_TEST_CLOCK (clock);
  GST_INFO ("Time: %" GST_TIME_FORMAT, GST_TIME_ARGS (gst_clock_get_time (clock)));
  gst_test_clock_advance_time ( test_clock, 1 * GST_SECOND);
  GST_INFO ("Time: %" GST_TIME_FORMAT, GST_TIME_ARGS (gst_clock_get_time (clock)));
  g_usleep (10 * G_USEC_PER_SEC);
  GST_INFO ("Time: %" GST_TIME_FORMAT, GST_TIME_ARGS (gst_clock_get_time (clock)));
  gst_test_clock_set_time (test_clock, 42 * GST_SECOND);
  GST_INFO ("Time: %" GST_TIME_FORMAT, GST_TIME_ARGS (gst_clock_get_time (clock)));
  ...
]|

#GstClock allows for setting up single shot or periodic clock notifications
as well as waiting for these notifications synchronously (using
gst_clock_id_wait()) or asynchronously (using gst_clock_id_wait_async() or
gst_clock_id_wait_async()). This is used by many GStreamer elements,
among them #GstBaseSrc and #GstBaseSink.

#GstTestClock keeps track of these clock notifications. By calling
gst_test_clock_wait_for_next_pending_id() or
gst_test_clock_wait_for_multiple_pending_ids() a unit tests may wait for the
next one or several clock notifications to be requested. Additionally unit
tests may release blocked waits in a controlled fashion by calling
gst_test_clock_process_next_clock_id(). This way a unit test can control the
inaccuracy (jitter) of clock notifications, since the test can decide to
release blocked waits when the clock time has advanced exactly to, or past,
the requested clock notification time.

There are also interfaces for determining if a notification belongs to a
#GstTestClock or not, as well as getting the number of requested clock
notifications so far.

N.B.: When a unit test waits for a certain amount of clock notifications to
be requested in gst_test_clock_wait_for_next_pending_id() or
gst_test_clock_wait_for_multiple_pending_ids() then these functions may block
for a long time. If they block forever then the expected clock notifications
were never requested from #GstTestClock, and so the assumptions in the code
of the unit test are wrong. The unit test case runner in gstcheck is
expected to catch these cases either by the default test case timeout or the
one set for the unit test by calling tcase_set_timeout\(\).

The sample code below assumes that the element under test will delay a
buffer pushed on the source pad by some latency until it arrives on the sink
pad. Moreover it is assumed that the element will at some point call
gst_clock_id_wait() to synchronously wait for a specific time. The first
buffer sent will arrive exactly on time only delayed by the latency. The
second buffer will arrive a little late (7ms) due to simulated jitter in the
clock notification.

## Demonstration of how to work with clock notifications and #GstTestClock

|[&lt;!-- language="C" --&gt;
  #include &lt;gst/gst.h&gt;
  #include &lt;gst/check/gstcheck.h&gt;
  #include &lt;gst/check/gsttestclock.h&gt;

  GstClockTime latency;
  GstElement *element;
  GstPad *srcpad;
  GstClock *clock;
  GstTestClock *test_clock;
  GstBuffer buf;
  GstClockID pending_id;
  GstClockID processed_id;

  latency = 42 * GST_MSECOND;
  element = create_element (latency, ...);
  srcpad = get_source_pad (element);

  clock = gst_test_clock_new ();
  test_clock = GST_TEST_CLOCK (clock);
  gst_element_set_clock (element, clock);

  GST_INFO ("Set time, create and push the first buffer\n");
  gst_test_clock_set_time (test_clock, 0);
  buf = create_test_buffer (gst_clock_get_time (clock), ...);
  gst_assert_cmpint (gst_pad_push (srcpad, buf), ==, GST_FLOW_OK);

  GST_INFO ("Block until element is waiting for a clock notification\n");
  gst_test_clock_wait_for_next_pending_id (test_clock, &amp;pending_id);
  GST_INFO ("Advance to the requested time of the clock notification\n");
  gst_test_clock_advance_time (test_clock, latency);
  GST_INFO ("Release the next blocking wait and make sure it is the one from element\n");
  processed_id = gst_test_clock_process_next_clock_id (test_clock);
  g_assert (processed_id == pending_id);
  g_assert_cmpint (GST_CLOCK_ENTRY_STATUS (processed_id), ==, GST_CLOCK_OK);
  gst_clock_id_unref (pending_id);
  gst_clock_id_unref (processed_id);

  GST_INFO ("Validate that element produced an output buffer and check its timestamp\n");
  g_assert_cmpint (get_number_of_output_buffer (...), ==, 1);
  buf = get_buffer_pushed_by_element (element, ...);
  g_assert_cmpint (GST_BUFFER_TIMESTAMP (buf), ==, latency);
  gst_buffer_unref (buf);
  GST_INFO ("Check that element does not wait for any clock notification\n");
  g_assert (!gst_test_clock_peek_next_pending_id (test_clock, NULL));

  GST_INFO ("Set time, create and push the second buffer\n");
  gst_test_clock_advance_time (test_clock, 10 * GST_SECOND);
  buf = create_test_buffer (gst_clock_get_time (clock), ...);
  gst_assert_cmpint (gst_pad_push (srcpad, buf), ==, GST_FLOW_OK);

  GST_INFO ("Block until element is waiting for a new clock notification\n");
  (gst_test_clock_wait_for_next_pending_id (test_clock, &amp;pending_id);
  GST_INFO ("Advance past 7ms beyond the requested time of the clock notification\n");
  gst_test_clock_advance_time (test_clock, latency + 7 * GST_MSECOND);
  GST_INFO ("Release the next blocking wait and make sure it is the one from element\n");
  processed_id = gst_test_clock_process_next_clock_id (test_clock);
  g_assert (processed_id == pending_id);
  g_assert_cmpint (GST_CLOCK_ENTRY_STATUS (processed_id), ==, GST_CLOCK_OK);
  gst_clock_id_unref (pending_id);
  gst_clock_id_unref (processed_id);

  GST_INFO ("Validate that element produced an output buffer and check its timestamp\n");
  g_assert_cmpint (get_number_of_output_buffer (...), ==, 1);
  buf = get_buffer_pushed_by_element (element, ...);
  g_assert_cmpint (GST_BUFFER_TIMESTAMP (buf), ==,
      10 * GST_SECOND + latency + 7 * GST_MSECOND);
  gst_buffer_unref (buf);
  GST_INFO ("Check that element does not wait for any clock notification\n");
  g_assert (!gst_test_clock_peek_next_pending_id (test_clock, NULL));
  ...
]|

Since #GstTestClock is only supposed to be used in unit tests it calls
g_assert(), g_assert_cmpint() or g_assert_cmpuint() to validate all function
arguments. This will highlight any issues with the unit test code itself.</doc>
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="76"/>
      <constructor name="new" c:identifier="gst_test_clock_new" version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="659">Creates a new test clock with its time set to zero.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="666">a #GstTestClock cast to #GstClock.</doc>
          <type name="Gst.Clock" c:type="GstClock*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_start_time"
                   c:identifier="gst_test_clock_new_with_start_time"
                   version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="676">Creates a new test clock with its time set to the specified time.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="684">a #GstTestClock cast to #GstClock.</doc>
          <type name="Gst.Clock" c:type="GstClock*"/>
        </return-value>
        <parameters>
          <parameter name="start_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="678">a #GstClockTime set to the desired start time of the clock.</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="id_list_get_latest_time"
                c:identifier="gst_test_clock_id_list_get_latest_time"
                version="1.4">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="1160">Finds the latest time inside the list.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </return-value>
        <parameters>
          <parameter name="pending_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1162">List
    of of pending #GstClockIDs</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="Gst.ClockID"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <method name="advance_time"
              c:identifier="gst_test_clock_advance_time"
              version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="738">Advances the time of the @test_clock by the amount given by @delta. The
time of @test_clock is monotonically increasing, therefore providing a
@delta which is negative or zero is a programming error.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="740">a #GstTestClock for which to increase the time</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="741">a positive #GstClockTimeDiff to be added to the time of the clock</doc>
            <type name="Gst.ClockTimeDiff" c:type="GstClockTimeDiff"/>
          </parameter>
        </parameters>
      </method>
      <method name="crank" c:identifier="gst_test_clock_crank" version="1.8">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="1187">A "crank" consists of three steps:
1: Wait for a #GstClockID to be registered with the #GstTestClock.
2: Advance the #GstTestClock to the time the #GstClockID is waiting, unless
   the clock time is already passed the clock id (Since: 1.18).
3: Release the #GstClockID wait.
A "crank" can be though of as the notion of
manually driving the clock forward to its next logical step.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="1199">%TRUE if the crank was successful, %FALSE otherwise.

MT safe.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1189">#GstTestClock to crank</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_entry_time"
              c:identifier="gst_test_clock_get_next_entry_time"
              version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="961">Retrieve the requested time for the next pending clock notification.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="969">a #GstClockTime set to the time of the next pending clock
notification. If no clock notifications have been requested
%GST_CLOCK_TIME_NONE will be returned.</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="963">a #GstTestClock to fetch the next clock notification time for</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_id" c:identifier="gst_test_clock_has_id" version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="800">Checks whether @test_clock was requested to provide the clock notification
given by @id.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="810">%TRUE if the clock has been asked to provide the given clock
notification, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="802">a #GstTestClock to ask if it provided the notification</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="803">a #GstClockID clock notification</doc>
            <type name="Gst.ClockID" c:type="GstClockID"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_id_count"
              c:identifier="gst_test_clock_peek_id_count"
              version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="773">Determine the number of pending clock notifications that have been
requested from the @test_clock.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="782">the number of pending clock notifications.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="775">a #GstTestClock for which to count notifications</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_next_pending_id"
              c:identifier="gst_test_clock_peek_next_pending_id"
              version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="830">Determines if the @pending_id is the next clock notification scheduled to
be triggered given the current time of the @test_clock.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="841">%TRUE if @pending_id is the next clock notification to be
triggered, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="832">a #GstTestClock to check the clock notifications for</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="pending_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="833">a #GstClockID clock
notification to look for</doc>
            <type name="Gst.ClockID" c:type="GstClockID*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_id"
              c:identifier="gst_test_clock_process_id"
              version="1.18">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="1087">Processes and releases the pending ID.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1089">#GstTestClock for which to process the pending IDs</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="pending_id" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1090">#GstClockID</doc>
            <type name="Gst.ClockID" c:type="GstClockID"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_id_list"
              c:identifier="gst_test_clock_process_id_list"
              version="1.4">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="1123">Processes and releases the pending IDs in the list.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="135"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1125">#GstTestClock for which to process the pending IDs</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="pending_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1126">List
    of pending #GstClockIDs</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="Gst.ClockID"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="process_next_clock_id"
              c:identifier="gst_test_clock_process_next_clock_id"
              version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="919">MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="114"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="926">a #GstClockID containing the next pending clock
notification.</doc>
          <type name="Gst.ClockID" c:type="GstClockID"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="921">a #GstTestClock for which to retrieve the next pending clock
notification</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_time"
              c:identifier="gst_test_clock_set_time"
              version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="702">Sets the time of @test_clock to the time given by @new_time. The time of
@test_clock is monotonically increasing, therefore providing a @new_time
which is earlier or equal to the time of the clock as given by
gst_clock_get_time() is a programming error.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="704">a #GstTestClock of which to set the time</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="new_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="705">a #GstClockTime later than that returned by gst_clock_get_time()</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="timed_wait_for_multiple_pending_ids"
              c:identifier="gst_test_clock_timed_wait_for_multiple_pending_ids"
              version="1.16">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="1037">Blocks until at least @count clock notifications have been requested from
@test_clock, or the timeout expires.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gsttestclock.c"
               line="1051">a @gboolean %TRUE if the waits have been registered, %FALSE if not.
(Could be that it timed out waiting or that more waits than waits was found)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1039">#GstTestClock for which to await having enough pending clock</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1040">the number of pending clock notifications to wait for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1041">the timeout in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pending_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1042">Address
    of a #GList pointer variable to store the list of pending #GstClockIDs
    that expired, or %NULL</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="Gst.ClockID"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_multiple_pending_ids"
              c:identifier="gst_test_clock_wait_for_multiple_pending_ids"
              version="1.4">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="1001">Blocks until at least @count clock notifications have been requested from
@test_clock. There is no timeout for this wait, see the main description of
#GstTestClock.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1003">#GstTestClock for which to await having enough pending clock</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1004">the number of pending clock notifications to wait for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pending_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="1005">Address
    of a #GList pointer variable to store the list of pending #GstClockIDs
    that expired, or %NULL</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="Gst.ClockID"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_next_pending_id"
              c:identifier="gst_test_clock_wait_for_next_pending_id"
              version="1.2">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="862">Waits until a clock notification is requested from @test_clock. There is no
timeout for this wait, see the main description of #GstTestClock. A reference
to the pending clock notification is stored in @pending_id.

MT safe.</doc>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="864">#GstTestClock for which to get the pending clock notification</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="pending_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="865">#GstClockID
with information about the pending clock notification</doc>
            <type name="Gst.ClockID" c:type="GstClockID*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_pending_id_count"
              c:identifier="gst_test_clock_wait_for_pending_id_count"
              version="1.2"
              deprecated="1">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="897">Blocks until at least @count clock notifications have been requested from
@test_clock. There is no timeout for this wait, see the main description of
#GstTestClock.</doc>
        <doc-deprecated xml:space="preserve">use gst_test_clock_wait_for_multiple_pending_ids() instead.</doc-deprecated>
        <source-position filename="..\libs\gst\check\gsttestclock.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="test_clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="899">#GstTestClock for which to await having enough pending clock</doc>
            <type name="TestClock" c:type="GstTestClock*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="..\libs\gst\check\gsttestclock.c"
                 line="900">the number of pending clock notifications to wait for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="clock-type" writable="1" transfer-ownership="none">
        <type name="Gst.ClockType"/>
      </property>
      <property name="start-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.c"
             line="278">When a #GstTestClock is constructed it will have a certain start time set.
If the clock was created using gst_test_clock_new_with_start_time() then
this property contains the value of the @start_time argument. If
gst_test_clock_new() was called the clock started at time zero, and thus
this property contains the value 0.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent">
        <type name="Gst.Clock" c:type="GstClock"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TestClockPrivate" c:type="GstTestClockPrivate*"/>
      </field>
    </class>
    <record name="TestClockClass"
            c:type="GstTestClockClass"
            glib:is-gtype-struct-for="TestClock"
            version="1.2">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gsttestclock.h"
           line="65">The class of a #GstTestClock, which has no virtual methods to override.</doc>
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="76"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gsttestclock.h"
             line="67">the parent class structure</doc>
        <type name="Gst.ClockClass" c:type="GstClockClass"/>
      </field>
    </record>
    <record name="TestClockPrivate" c:type="GstTestClockPrivate" disguised="1">
      <source-position filename="..\libs\gst\check\gsttestclock.h" line="47"/>
    </record>
    <function name="buffer_straw_get_buffer"
              c:identifier="gst_buffer_straw_get_buffer">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstbufferstraw.c"
           line="101">Get one buffer from @pad. Implemented via buffer probes. This function will
block until the pipeline passes a buffer over @pad, so for robust behavior
in unit tests, you need to use check's timeout to fail out in the case that a
buffer never arrives.

You must have previously called gst_buffer_straw_start_pipeline() on
@pipeline and @pad.</doc>
      <source-position filename="..\libs\gst\check\gstbufferstraw.h"
                       line="33"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstbufferstraw.c"
             line="114">the captured #GstBuffer.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="bin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstbufferstraw.c"
               line="103">the pipeline previously started via gst_buffer_straw_start_pipeline()</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="pad" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstbufferstraw.c"
               line="104">the pad previously passed to gst_buffer_straw_start_pipeline()</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_straw_start_pipeline"
              c:identifier="gst_buffer_straw_start_pipeline">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstbufferstraw.c"
           line="64">Sets up a pipeline for buffer sucking. This will allow you to call
gst_buffer_straw_get_buffer() to access buffers as they pass over @pad.

This function is normally used in unit tests that want to verify that a
particular element is outputting correct buffers. For example, you would make
a pipeline via gst_parse_launch(), pull out the pad you want to monitor, then
call gst_buffer_straw_get_buffer() to get the buffers that pass through @pad.
The pipeline will block until you have sucked off the buffers.

This function will set the state of @bin to PLAYING; to clean up, be sure to
call gst_buffer_straw_stop_pipeline().

Note that you may not start two buffer straws at the same time. This function
is intended for unit tests, not general API use. In fact it calls fail_if
from libcheck, so you cannot use it outside unit tests.</doc>
      <source-position filename="..\libs\gst\check\gstbufferstraw.h"
                       line="30"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstbufferstraw.c"
               line="66">the pipeline to run</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="pad" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstbufferstraw.c"
               line="67">a pad on an element in @bin</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_straw_stop_pipeline"
              c:identifier="gst_buffer_straw_stop_pipeline">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstbufferstraw.c"
           line="136">Set @bin to #GST_STATE_NULL and release resource allocated in
gst_buffer_straw_start_pipeline().

You must have previously called gst_buffer_straw_start_pipeline() on
@pipeline and @pad.</doc>
      <source-position filename="..\libs\gst\check\gstbufferstraw.h"
                       line="36"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstbufferstraw.c"
               line="138">the pipeline previously started via gst_buffer_straw_start_pipeline()</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="pad" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstbufferstraw.c"
               line="139">the pad previously passed to gst_buffer_straw_start_pipeline()</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_abi_list" c:identifier="gst_check_abi_list">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="1006">Verifies that reference values and current values are equals in @list.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="187"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1008">A list of GstCheckABIStruct to be verified</doc>
          <type name="CheckABIStruct" c:type="GstCheckABIStruct*"/>
        </parameter>
        <parameter name="have_abi_sizes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1009">Whether there is a reference ABI size already specified,
if it is %FALSE and the `GST_ABI` environment variable is set, usable code
for @list will be printed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_add_log_filter"
              c:identifier="gst_check_add_log_filter"
              version="1.12"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="127">Add a callback @func to be called for all log messages that matches
@log_domain, @log_level and @regex. If @func is NULL the
matching logs will be silently discarded by GstCheck.

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="103"/>
      <return-value>
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="142">A filter that can be passed to @gst_check_remove_log_filter.</doc>
        <type name="CheckLogFilter" c:type="GstCheckLogFilter*"/>
      </return-value>
      <parameters>
        <parameter name="log_domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="129">the log domain of the message</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="log_level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="130">the log level of the message</doc>
          <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
        </parameter>
        <parameter name="regex" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="131">a #GRegex to match the message</doc>
          <type name="GLib.Regex" c:type="GRegex*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="4"
                   destroy="5">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="132">the function to call for matching messages</doc>
          <type name="CheckLogFilterFunc" c:type="GstCheckLogFilterFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="133">the user data to pass to @func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy_data" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="134">#GDestroyNotify for @user_data</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_buffer_data" c:identifier="gst_check_buffer_data">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="780">Compare the buffer contents with @data and @size.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="171"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="782">buffer to compare</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="783">data to compare to</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="784">size of data to compare</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_caps_equal" c:identifier="gst_check_caps_equal">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="759">Compare two caps with gst_caps_is_equal and fail unless they are
equal.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="168"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="caps1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="761">first caps to compare</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="caps2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="762">second caps to compare</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_chain_func" c:identifier="gst_check_chain_func">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="437">A fake chain function that appends the buffer to the internal list of
buffers.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="114"/>
      <return-value transfer-ownership="none">
        <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
      </return-value>
      <parameters>
        <parameter name="pad" transfer-ownership="none">
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
        <parameter name="parent" transfer-ownership="none">
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_clear_log_filter"
              c:identifier="gst_check_clear_log_filter"
              version="1.12">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="183">Clear all filters added by @gst_check_add_log_filter.

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="111"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="check_drop_buffers" c:identifier="gst_check_drop_buffers">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="744">Unref and remove all buffers that are in the global @buffers GList,
emptying the list.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="165"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="check_element_push_buffer"
              c:identifier="gst_check_element_push_buffer">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="978">Create an element using the factory providing the @element_name and
push the @buffer_in to this element. The element should create one buffer
and this will be compared with @buffer_out. We only check the caps
and the data of the buffers. This function unrefs the buffers.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="179"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="element_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="980">name of the element that needs to be created</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="buffer_in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="981">push this buffer to the element</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="caps_in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="982">the #GstCaps expected of the sinkpad of the element</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="buffer_out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="983">compare the result with this buffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="caps_out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="984">the #GstCaps expected of the srcpad of the element</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_element_push_buffer_list"
              c:identifier="gst_check_element_push_buffer_list">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="828">Create an element using the factory providing the @element_name and push the
buffers in @buffer_in to this element. The element should create the buffers
equal to the buffers in @buffer_out. We only check the size and the data of
the buffers. This function unrefs the buffers in the two lists.
The last_flow_return parameter indicates the expected flow return value from
pushing the final buffer in the list.
This can be used to set up a test which pushes some buffers and then an
invalid buffer, when the final buffer is expected to fail, for example.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="174"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="element_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="830">name of the element that needs to be created</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="buffer_in" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="831">a list of buffers that needs to be
 pushed to the element</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Gst.Buffer"/>
          </type>
        </parameter>
        <parameter name="caps_in" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="833">the #GstCaps expected of the sinkpad of the element</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="buffer_out" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="834">a list of buffers that we expect from
the element</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Gst.Buffer"/>
          </type>
        </parameter>
        <parameter name="caps_out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="836">the #GstCaps expected of the srcpad of the element</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="last_flow_return" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="837">the last buffer push needs to give this GstFlowReturn</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_init" c:identifier="gst_check_init">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="100"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <type name="utf8" c:type="char***"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_message_error"
              c:identifier="gst_check_message_error">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="117"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="Gst.MessageType" c:type="GstMessageType"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="code" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_object_destroyed_on_unref"
              c:identifier="gst_check_object_destroyed_on_unref"
              version="1.6">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="1266">Unrefs @object_to_unref and checks that is has properly been
destroyed.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="207"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object_to_unref"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1268">The #GObject to unref</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_objects_destroyed_on_unref"
              c:identifier="gst_check_objects_destroyed_on_unref"
              version="1.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="1207">Unrefs @object_to_unref and checks that is has properly been
destroyed, also checks that the other objects passed in
parameter have been destroyed as a concequence of
unrefing @object_to_unref. Last variable argument should be NULL.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="203"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object_to_unref"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1209">The #GObject to unref</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="first_object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1210">The first object that should be destroyed as a
concequence of unrefing @object_to_unref.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1212">Additional object that should have been destroyed.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="check_remove_log_filter"
              c:identifier="gst_check_remove_log_filter"
              version="1.12">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="164">Remove a filter that has been added by @gst_check_add_log_filter.

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="108"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="166">Filter returned by @gst_check_add_log_filter</doc>
          <type name="CheckLogFilter" c:type="GstCheckLogFilter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_run_suite"
              c:identifier="gst_check_run_suite"
              introspectable="0">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="190"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="1066">number of failed tests</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="suite" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1062">the check test suite</doc>
          <type c:type="Suite*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1063">name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="fname" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1064">file name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_element"
              c:identifier="gst_check_setup_element">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="456">setup an element for a filter test with mysrcpad and mysinkpad</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="121"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="462">a new element</doc>
        <type name="Gst.Element" c:type="GstElement*"/>
      </return-value>
      <parameters>
        <parameter name="factory" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="458">factory</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_events" c:identifier="gst_check_setup_events">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="1171">Push stream-start, caps and segment event, which consist of the minimum
required events to allow streaming. Caps is optional to allow raw src
testing. If @element has more than one src or sink pad, use
gst_check_setup_events_with_stream_id() instead.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="194"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="srcpad" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1173">The src #GstPad to push on</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1174">The #GstElement use to create the stream id</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="caps"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1175">#GstCaps in case caps event must be sent</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1176">The #GstFormat of the default segment to send</doc>
          <type name="Gst.Format" c:type="GstFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_events_with_stream_id"
              c:identifier="gst_check_setup_events_with_stream_id">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="1144">Push stream-start, caps and segment event, which consist of the minimum
required events to allow streaming. Caps is optional to allow raw src
testing.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="198"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="srcpad" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1146">The src #GstPad to push on</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1147">The #GstElement use to create the stream id</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="caps"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1148">#GstCaps in case caps event must be sent</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1149">The #GstFormat of the default segment to send</doc>
          <type name="Gst.Format" c:type="GstFormat"/>
        </parameter>
        <parameter name="stream_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="1150">A unique identifier for the stream</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_sink_pad"
              c:identifier="gst_check_setup_sink_pad">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="643">Does the same as #gst_check_setup_sink_pad_by_name with the &lt;emphasis&gt; name &lt;/emphasis&gt; parameter equal to "src".</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="143"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="650">a new pad that can be used to check the output of @element</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="645">element to setup pad on</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="tmpl" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="646">pad template</doc>
          <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_sink_pad_by_name"
              c:identifier="gst_check_setup_sink_pad_by_name">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="658">Creates a new sink pad (based on the given @tmpl) and links it to the given @element src pad
(the pad that matches the given @name).
You can set event/chain/query functions on this pad to check the output of the @element.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="151"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="668">a new pad that can be used to check the output of @element</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="660">element to setup pad on</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="tmpl" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="661">pad template</doc>
          <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="662">Name of the @element src pad that will be linked to the sink pad that will be setup</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_sink_pad_by_name_from_template"
              c:identifier="gst_check_setup_sink_pad_by_name_from_template"
              version="1.4">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="155"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="707">a new pad</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="703">element to setup pad on</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="tmpl" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="704">pad template</doc>
          <type name="Gst.PadTemplate" c:type="GstPadTemplate*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="705">name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_sink_pad_from_template"
              c:identifier="gst_check_setup_sink_pad_from_template"
              version="1.4">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="147"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="690">a new pad</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="687">element to setup pad on</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="tmpl" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="688">pad template</doc>
          <type name="Gst.PadTemplate" c:type="GstPadTemplate*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_src_pad"
              c:identifier="gst_check_setup_src_pad">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="488">Does the same as #gst_check_setup_src_pad_by_name with the &lt;emphasis&gt; name &lt;/emphasis&gt; parameter equal to "sink".</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="127"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="495">A new pad that can be used to inject data on @element</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="490">element to setup pad on</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="tmpl" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="491">pad template</doc>
          <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_src_pad_by_name"
              c:identifier="gst_check_setup_src_pad_by_name">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="503">Creates a new src pad (based on the given @tmpl) and links it to the given @element sink pad (the pad that matches the given @name).
Before using the src pad to push data on @element you need to call #gst_check_setup_events on the created src pad.

Example of how to push a buffer on @element:

|[&lt;!-- language="C" --&gt;
static GstStaticPadTemplate sinktemplate = GST_STATIC_PAD_TEMPLATE ("sink",
GST_PAD_SINK,
GST_PAD_ALWAYS,
GST_STATIC_CAPS (YOUR_CAPS_TEMPLATE_STRING)
);
static GstStaticPadTemplate srctemplate = GST_STATIC_PAD_TEMPLATE ("src",
GST_PAD_SRC,
GST_PAD_ALWAYS,
GST_STATIC_CAPS (YOUR_CAPS_TEMPLATE_STRING)
);

GstElement * element = gst_check_setup_element ("element");
GstPad * mysrcpad = gst_check_setup_src_pad (element, &amp;srctemplate);
GstPad * mysinkpad = gst_check_setup_sink_pad (element, &amp;sinktemplate);

gst_pad_set_active (mysrcpad, TRUE);
gst_pad_set_active (mysinkpad, TRUE);
fail_unless (gst_element_set_state (element, GST_STATE_PLAYING) == GST_STATE_CHANGE_SUCCESS, "could not set to playing");

GstCaps * caps = gst_caps_from_string (YOUR_DESIRED_SINK_CAPS);
gst_check_setup_events (mysrcpad, element, caps, GST_FORMAT_TIME);
gst_caps_unref (caps);

fail_unless (gst_pad_push (mysrcpad, gst_buffer_new_and_alloc(2)) == GST_FLOW_OK);
]|

For very simple input/output test scenarios checkout #gst_check_element_push_buffer_list and #gst_check_element_push_buffer.</doc>
      <source-position filename="..\libs\gst\check\gstcheck.h" line="135"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="543">A new pad that can be used to inject data on @element</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="505">element to setup src pad on</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="tmpl" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="506">pad template</doc>
          <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="507">Name of the @element sink pad that will be linked to the src pad that will be setup</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_src_pad_by_name_from_template"
              c:identifier="gst_check_setup_src_pad_by_name_from_template"
              version="1.4">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="139"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="581">a new pad</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="577">element to setup pad on</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="tmpl" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="578">pad template</doc>
          <type name="Gst.PadTemplate" c:type="GstPadTemplate*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="579">name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_setup_src_pad_from_template"
              c:identifier="gst_check_setup_src_pad_from_template"
              version="1.4">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="131"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstcheck.c"
             line="564">a new pad</doc>
        <type name="Gst.Pad" c:type="GstPad*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="561">element to setup pad on</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="tmpl" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstcheck.c"
               line="562">pad template</doc>
          <type name="Gst.PadTemplate" c:type="GstPadTemplate*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_teardown_element"
              c:identifier="gst_check_teardown_element">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="124"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_teardown_pad_by_name"
              c:identifier="gst_check_teardown_pad_by_name">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="159"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_teardown_sink_pad"
              c:identifier="gst_check_teardown_sink_pad">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="184"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_teardown_src_pad"
              c:identifier="gst_check_teardown_src_pad">
      <source-position filename="..\libs\gst\check\gstcheck.h" line="162"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
      </parameters>
    </function>
    <function name="consistency_checker_add_pad"
              c:identifier="gst_consistency_checker_add_pad">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstconsistencychecker.c"
           line="244">Sets up a data probe on the given pad which will raise assertions if the
data flow is inconsistent.</doc>
      <source-position filename="..\libs\gst\check\gstconsistencychecker.h"
                       line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstconsistencychecker.c"
             line="252">%TRUE if the pad was added</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="consist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstconsistencychecker.c"
               line="246">The #GstStreamConsistency handle</doc>
          <type name="StreamConsistency" c:type="GstStreamConsistency*"/>
        </parameter>
        <parameter name="pad" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstconsistencychecker.c"
               line="247">The #GstPad on which the dataflow will be checked.</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="consistency_checker_free"
              c:identifier="gst_consistency_checker_free">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstconsistencychecker.c"
           line="283">Frees the allocated data and probes associated with @consist.</doc>
      <source-position filename="..\libs\gst\check\gstconsistencychecker.h"
                       line="48"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="consist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstconsistencychecker.c"
               line="285">The #GstStreamConsistency to free.</doc>
          <type name="StreamConsistency" c:type="GstStreamConsistency*"/>
        </parameter>
      </parameters>
    </function>
    <function name="consistency_checker_new"
              c:identifier="gst_consistency_checker_new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstconsistencychecker.c"
           line="219">Sets up a data probe on the given pad which will raise assertions if the
data flow is inconsistent.</doc>
      <source-position filename="..\libs\gst\check\gstconsistencychecker.h"
                       line="38"/>
      <return-value>
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstconsistencychecker.c"
             line="226">A #GstStreamConsistency structure used to track data flow.</doc>
        <type name="StreamConsistency" c:type="GstStreamConsistency*"/>
      </return-value>
      <parameters>
        <parameter name="pad" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstconsistencychecker.c"
               line="221">The #GstPad on which the dataflow will be checked.</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="consistency_checker_reset"
              c:identifier="gst_consistency_checker_reset">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstconsistencychecker.c"
           line="265">Reset the stream checker's internal variables.</doc>
      <source-position filename="..\libs\gst\check\gstconsistencychecker.h"
                       line="45"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="consist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstconsistencychecker.c"
               line="267">The #GstStreamConsistency to reset.</doc>
          <type name="StreamConsistency" c:type="GstStreamConsistency*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="gstcheck">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstcheck.c"
           line="23">These macros and functions are for internal use of the unit tests found
inside the 'check' directories of various GStreamer packages.

One notable feature is that one can use the environment variables GST_CHECKS
and GST_CHECKS_IGNORE to select which tests to run or skip. Both variables
can contain a comma separated list of test name globs (e.g. test_*).</doc>
    </docsection>
    <docsection name="gstcheckbufferstraw">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstbufferstraw.c"
           line="23">These macros and functions are for internal use of the unit tests found
inside the 'check' directories of various GStreamer packages.</doc>
    </docsection>
    <docsection name="gstcheckconsistencychecker">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstconsistencychecker.c"
           line="24">These macros and functions are for internal use of the unit tests found
inside the 'check' directories of various GStreamer packages.</doc>
    </docsection>
    <function name="harness_new"
              c:identifier="gst_harness_new"
              moved-to="Harness.new"
              version="1.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="928">Creates a new harness. Works like gst_harness_new_with_padnames(), except it
assumes the #GstElement sinkpad is named "sink" and srcpad is named "src"

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="101"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="937">a #GstHarness, or %NULL if the harness could
not be created</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </return-value>
      <parameters>
        <parameter name="element_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="930">a #gchar describing the #GstElement name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="harness_new_empty"
              c:identifier="gst_harness_new_empty"
              moved-to="Harness.new_empty"
              version="1.8"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="658">Creates a new empty harness. Use gst_harness_add_element_full() to add
an #GstElement to it.

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="68"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="666">a #GstHarness, or %NULL if the harness could
not be created</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </return-value>
    </function>
    <function name="harness_new_full"
              c:identifier="gst_harness_new_full"
              moved-to="Harness.new_full"
              version="1.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="798">Creates a new harness.

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="79"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="817">a #GstHarness, or %NULL if the harness could
not be created</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="800">a #GstElement to attach the harness to (transfer none)</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="hsrc"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="801">a #GstStaticPadTemplate describing the harness srcpad.
%NULL will not create a harness srcpad.</doc>
          <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
        </parameter>
        <parameter name="element_sinkpad_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="803">a #gchar with the name of the element
sinkpad that is then linked to the harness srcpad. Can be a static or request
or a sometimes pad that has been added. %NULL will not get/request a sinkpad
from the element. (Like if the element is a src.)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="hsink"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="807">a #GstStaticPadTemplate describing the harness sinkpad.
%NULL will not create a harness sinkpad.</doc>
          <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
        </parameter>
        <parameter name="element_srcpad_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="809">a #gchar with the name of the element
srcpad that is then linked to the harness sinkpad, similar to the
@element_sinkpad_name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="harness_new_parse"
              c:identifier="gst_harness_new_parse"
              moved-to="Harness.new_parse"
              version="1.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="1021">Creates a new harness, parsing the @launchline and putting that in a #GstBin,
and then attches the harness to the bin.

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="104"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="1030">a #GstHarness, or %NULL if the harness could
not be created</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </return-value>
      <parameters>
        <parameter name="launchline" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="1023">a #gchar describing a gst-launch type line</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="harness_new_with_element"
              c:identifier="gst_harness_new_with_element"
              moved-to="Harness.new_with_element"
              version="1.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="834">Creates a new harness. Works in the same way as gst_harness_new_full(), only
that generic padtemplates are used for the harness src and sinkpads, which
will be sufficient in most usecases.

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="86"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="850">a #GstHarness, or %NULL if the harness could
not be created</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </return-value>
      <parameters>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="836">a #GstElement to attach the harness to (transfer none)</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="element_sinkpad_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="837">a #gchar with the name of the element
sinkpad that is then linked to the harness srcpad. %NULL does not attach a
sinkpad</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="element_srcpad_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="840">a #gchar with the name of the element
srcpad that is then linked to the harness sinkpad. %NULL does not attach a
srcpad</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="harness_new_with_padnames"
              c:identifier="gst_harness_new_with_padnames"
              moved-to="Harness.new_with_padnames"
              version="1.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="863">Creates a new harness. Works like gst_harness_new_with_element(),
except you specify the factoryname of the #GstElement

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="91"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="878">a #GstHarness, or %NULL if the harness could
not be created</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </return-value>
      <parameters>
        <parameter name="element_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="865">a #gchar describing the #GstElement name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="element_sinkpad_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="866">a #gchar with the name of the element
sinkpad that is then linked to the harness srcpad. %NULL does not attach a
sinkpad</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="element_srcpad_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="869">a #gchar with the name of the element
srcpad that is then linked to the harness sinkpad. %NULL does not attach a
srcpad</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="harness_new_with_templates"
              c:identifier="gst_harness_new_with_templates"
              moved-to="Harness.new_with_templates"
              version="1.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="897">Creates a new harness, like gst_harness_new_full(), except it
assumes the #GstElement sinkpad is named "sink" and srcpad is named "src"

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="96"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="..\libs\gst\check\gstharness.c"
             line="910">a #GstHarness, or %NULL if the harness could
not be created</doc>
        <type name="Harness" c:type="GstHarness*"/>
      </return-value>
      <parameters>
        <parameter name="element_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="899">a #gchar describing the #GstElement name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="hsrc"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="900">a #GstStaticPadTemplate describing the harness srcpad.
%NULL will not create a harness srcpad.</doc>
          <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
        </parameter>
        <parameter name="hsink"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="902">a #GstStaticPadTemplate describing the harness sinkpad.
%NULL will not create a harness sinkpad.</doc>
          <type name="Gst.StaticPadTemplate" c:type="GstStaticPadTemplate*"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="harness_stress_property_start"
                    c:identifier="gst_harness_stress_property_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="449"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="v">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="harness_stress_push_buffer_start"
                    c:identifier="gst_harness_stress_push_buffer_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="372"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="c">
        </parameter>
        <parameter name="s">
        </parameter>
        <parameter name="b">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="harness_stress_push_buffer_with_cb_start"
                    c:identifier="gst_harness_stress_push_buffer_with_cb_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="391"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="c">
        </parameter>
        <parameter name="s">
        </parameter>
        <parameter name="f">
        </parameter>
        <parameter name="d">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="harness_stress_push_event_start"
                    c:identifier="gst_harness_stress_push_event_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="403"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="e">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="harness_stress_push_event_with_cb_start"
                    c:identifier="gst_harness_stress_push_event_with_cb_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="420"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="f">
        </parameter>
        <parameter name="d">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="harness_stress_requestpad_start"
                    c:identifier="gst_harness_stress_requestpad_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="458"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="t">
        </parameter>
        <parameter name="n">
        </parameter>
        <parameter name="c">
        </parameter>
        <parameter name="r">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="harness_stress_send_upstream_event_start"
                    c:identifier="gst_harness_stress_send_upstream_event_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="430"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="e">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="harness_stress_send_upstream_event_with_cb_start"
                    c:identifier="gst_harness_stress_send_upstream_event_with_cb_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="438"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="f">
        </parameter>
        <parameter name="d">
        </parameter>
        <parameter name="n">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="harness_stress_statechange_start"
                    c:identifier="gst_harness_stress_statechange_start"
                    introspectable="0">
      <source-position filename="..\libs\gst\check\gstharness.h" line="365"/>
      <parameters>
        <parameter name="h">
        </parameter>
      </parameters>
    </function-macro>
    <function name="harness_stress_thread_stop"
              c:identifier="gst_harness_stress_thread_stop"
              moved-to="Harness.stress_thread_stop"
              version="1.6">
      <doc xml:space="preserve"
           filename="..\libs\gst\check\gstharness.c"
           line="3144">Stop the running #GstHarnessThread

MT safe.</doc>
      <source-position filename="..\libs\gst\check\gstharness.h" line="356"/>
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="t" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="..\libs\gst\check\gstharness.c"
               line="3146">a #GstHarnessThread</doc>
          <type name="HarnessThread" c:type="GstHarnessThread*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
